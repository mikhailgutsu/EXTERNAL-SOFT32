#include <windows.h>
#include <d3d9.h>
#include <d3dx9.h>
#include <iostream>

// Direct3D objects
IDirect3DDevice9* g_pd3dDevice = NULL;
ID3DXFont* g_pFont = NULL;

// Original EndScene function pointer
typedef HRESULT(APIENTRY* EndScene_t)(IDirect3DDevice9*);
EndScene_t oEndScene = NULL;

// Hooked EndScene function
HRESULT APIENTRY hkEndScene(IDirect3DDevice9* pDevice) {
    if (!g_pFont) {
        D3DXCreateFont(pDevice, 20, 0, FW_BOLD, 1, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH | FF_DONTCARE, TEXT("Arial"), &g_pFont);
    }

    RECT rect;
    SetRect(&rect, 50, 50, 0, 0);
    g_pFont->DrawText(NULL, TEXT("Hello, World!"), -1, &rect, DT_NOCLIP, D3DCOLOR_ARGB(255, 255, 255, 255));

    return oEndScene(pDevice);
}

// Hook function
DWORD WINAPI HookThread(LPVOID) {
    // Get Direct3D9 module
    HMODULE hD3D9 = GetModuleHandleA("d3d9.dll");
    if (hD3D9) {
        // Get Direct3DCreate9 function
        void* pDirect3DCreate9 = GetProcAddress(hD3D9, "Direct3DCreate9");
        if (pDirect3DCreate9) {
            // Create dummy Direct3D device
            IDirect3D9* pD3D = ((IDirect3D9 * (WINAPI*)(UINT))(pDirect3DCreate9))(D3D_SDK_VERSION);
            if (pD3D) {
                D3DPRESENT_PARAMETERS d3dpp = {};
                d3dpp.Windowed = TRUE;
                d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;
                d3dpp.hDeviceWindow = GetForegroundWindow();

                IDirect3DDevice9* pDevice = NULL;
                if (SUCCEEDED(pD3D->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, d3dpp.hDeviceWindow, D3DCREATE_SOFTWARE_VERTEXPROCESSING, &d3dpp, &pDevice))) {
                    // Get virtual table
                    void** pVTable = *reinterpret_cast<void***>(pDevice);

                    // Hook EndScene
                    oEndScene = (EndScene_t)pVTable[42];
                    DWORD oldProtect;
                    VirtualProtect(&pVTable[42], sizeof(void*), PAGE_EXECUTE_READWRITE, &oldProtect);
                    pVTable[42] = (void*)hkEndScene;
                    VirtualProtect(&pVTable[42], sizeof(void*), oldProtect, &oldProtect);

                    pDevice->Release();
                }
                pD3D->Release();
            }
        }
    }
    return 0;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved) {
    if (ul_reason_for_call == DLL_PROCESS_ATTACH) {
        DisableThreadLibraryCalls(hModule);
        CreateThread(NULL, 0, HookThread, NULL, 0, NULL);
    }
    return TRUE;
}
