#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
    , timer(new QTimer(this))
    , hProcess(nullptr)
    , playerBaseAddress(0x12345678) 
    , xOffset(0x50)
    , yOffset(0x54)
    , zOffset(0x58)
    , processID(0)
{
    ui->setupUi(this);
    connect(timer, &QTimer::timeout, this, &MainWindow::updateCoordinates);
}

MainWindow::~MainWindow() {
    delete ui;
}

DWORD MainWindow::GetProcessID(const char* processName) {
    DWORD processID = 0;
    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hSnapshot != INVALID_HANDLE_VALUE) {
        PROCESSENTRY32 pe;
        pe.dwSize = sizeof(PROCESSENTRY32);
        if (Process32First(hSnapshot, &pe)) {
            do {
                if (!_stricmp(pe.szExeFile, processName)) {
                    processID = pe.th32ProcessID;
                    break;
                }
            } while (Process32Next(hSnapshot, &pe));
        }
        CloseHandle(hSnapshot);
    }
    return processID;
}

template <typename T>
T MainWindow::ReadMemory(DWORD address) {
    T value;
    ReadProcessMemory(hProcess, (LPCVOID)address, &value, sizeof(T), NULL);
    return value;
}

void MainWindow::on_startButton_clicked() {
    const char* targetProcess = "target_game.exe";
    processID = GetProcessID(targetProcess);
    if (processID == 0) {
        ui->statusLabel->setText("Process not found!");
        return;
    }

    hProcess = OpenProcess(PROCESS_VM_READ, FALSE, processID);
    if (hProcess == NULL) {
        ui->statusLabel->setText("ERR!");
        return;
    }

    timer->start(1000); 
    ui->statusLabel->setText("Open reading.");
}

void MainWindow::on_stopButton_clicked() {
    timer->stop();
    if (hProcess) {
        CloseHandle(hProcess);
        hProcess = NULL;
    }
    ui->statusLabel->setText("Stoped.");
}

void MainWindow::updateCoordinates() {
    if (hProcess) {
        float playerX = ReadMemory<float>(playerBaseAddress + xOffset);
        float playerY = ReadMemory<float>(playerBaseAddress + yOffset);
        float playerZ = ReadMemory<float>(playerBaseAddress + zOffset);

        ui->coordinatesLabel->setText(QString("COO: X=%1 Y=%2 Z=%3").arg(playerX).arg(playerY).arg(playerZ));
    }
}
